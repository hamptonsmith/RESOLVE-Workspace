Concept Unbounded_One_Way_List_Template(type Entry, 
		evaluates Max_Length : Integer);
		uses String_Theory;

	Family One_Way_List is modeled by Cart_Prod
		Prec, Rem: Str(Entry);
	end;
	exemplar P;
	initialization
		ensures P.Prec = Empty_String and P.Rem = Empty_String;

	Operation Advance(updates P : One_Way_List);
		requires P.Rem /= Empty_string;
		ensures P.Prec o P.Rem = #P.Prec o #P.Rem 
			and |P.Prec| = |#P.Prec| + 1;

	Operation Reset(updates P : One_Way_List);
		ensures P.Prec = Empty_String and P.Rem = #P.Prec o #P.Rem;

	Operation Length_of_Rem(restores P : One_Way_List) : Integer;
		ensures Length_of_Rem = |P.Rem|;

	Operation Length_of_Prec(restores P : One_Way_List) : Integer;
		ensures Length_of_Prec = |P.Prec|;

	Operation Insert(alters New_Entry : Entry; updates P : One_Way_List);
		ensures P.Prec = #P.Prec and P.Rem = <#New_Entry> o #P.Rem;

	Operation Remove(replaces Entry_Removed : Entry; 
			updates P: One_Way_List);
		requires P.Rem /= Empty_String;
		ensures P.Prec = #P.Prec and #P.Rem = <Entry_Removed> o P.Rem;

	Operation Advance_to_End(updates P : One_Way_List);
		ensures P.Prec = #P.Prec o #P.Rem and P.Rem = Empty_String;

	Operation Swap_Prev_Entry_w(updates E : Entry; 
			updates P : One_Way_List);
		ensures P.Rem = #P.Rem and 
			P.Prec = Substring(#P.Prec, |#P.Prec| - 1) o <E> and
			E = Element_At(P.Prec, |#P.Prec| - 1);
	
	Operation Clear_List(clears P: One_Way_List);
			ensures P.Prec = Empty_String and P.Rem = Empty_String;
end;
